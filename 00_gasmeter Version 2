esphome:
  name: 00-gasmeter

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "YOUR KEY"

ota:
  password: !secret ota_gasmester

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password



globals:
  #counter für die impulse normal
  - id: total_pulses1
    type: int
    restore_value: false
    initial_value: '0'

  #counter für nur den impuls
  - id: total_pulses2
    type: int
    restore_value: false
    initial_value: '0'

# vom Gaszaehler der Faktor pro Impuls; bei mir 1 imp = 0,01m³
  - id: imp_ratio
    type: float
    restore_value: false
    initial_value: '0.01'  
  
binary_sensor:

# Sensor zählt, ob ein "klick" beim Gaszähler erfolgt ist. Auf Basis der Spannung
  - platform: analog_threshold
    name: "GasMeterAnalogTreshhold"
    sensor_id: gasmeteranaloginput
    threshold: 
      upper: 0.531
      lower: 0.53
    on_press:
      then:
        - lambda: id(total_pulses2) += 1;


# Sensor zählt, ob ein "klick" beim Gaszähler erfolgt ist. Auf Basis eines Eingang Impulses
  - platform: gpio
    id: internal_pulse_counter
    pin:
      number: D1
      mode: INPUT_PULLUP
    name: "Live-Impuls"
    filters:
     - delayed_on: 50ms
      # jü wert 150ms
    on_press:         
      then:
        - lambda: id(total_pulses1) += 1;


# schaut, ob der ESP8266 online ist   
  - platform: status
    name: "gasmeter Status"


sensor:
# zählt alle Impulse hoch und rechnet diese um in m³ 
  - platform: template
    name: "GasverbrauchAd"
    device_class: gas
    unit_of_measurement: "m³"
    state_class: "total_increasing"
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_pulses2) * id(imp_ratio);
      ESP_LOGD("Gaszähler analog TAG", "Pulse bisher: %d", id(total_pulses2));


# zählt alle Impulse hoch, jedoch die von der zweiten Berechnungsmethode und rechnet diese um in m³ 
  - platform: template
    name: "GasverbrauchPuls"
    device_class: gas
    unit_of_measurement: "m³"
    state_class: "total_increasing"
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_pulses1) * id(imp_ratio);
      ESP_LOGD("Gaszähler analog TAG", "Pulse bisher: %d", id(total_pulses1));


# zählt alle Impulse hoch, umrechnung in kWh (mal 10)
  - platform: template
    name: "Gasverbrauch-kWh"
    device_class: gas
    unit_of_measurement: "kWh"
    state_class: "total_increasing"
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_pulses2) * id(imp_ratio) * 10;
      ESP_LOGD("Gaszähler kWh TAG", "Pulse bisher: %d", id(total_pulses2));

 # 28.12.2023 due to new ESPhome 2023.12 Release Pins can only be used once. Quick Fix, Pulse Counter is not mandatory so it is excluded. After some Research 
 # - platform: pulse_counter
 #   pin: D1
 #   name: "Pulse Counter"
 #   icon: "mdi:pulse"




  - platform: adc
    #interner Wert, der die Spannung des Reed Sensors misst. 
    internal: FALSE
    #dieser Wert kann nach der Einrichtung auf True gesetzt werden. 
    pin: A0
    id: gasmeteranaloginput
    name: "GasMeterAnalogInput"
    update_interval: 2s

